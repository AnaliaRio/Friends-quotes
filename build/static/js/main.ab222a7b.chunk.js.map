{"version":3,"sources":["services/fetch.js","services/localStorage.js","components/App.js","index.js"],"names":["getQuotes","fetch","then","response","json","data","objectToExport","get","key","defaultValue","localStorageData","localStorage","getItem","JSON","parse","set","value","stringify","setItem","remove","removeItem","clear","App","useState","ls","setData","filterQuote","setFilterQuote","filterCharacter","setFilterCharacter","quote","character","newQuote","setNewQuote","useEffect","length","dataFromAPI","handleNewQuote","ev","target","id","htmlData","filter","oneQuote","toLowerCase","includes","map","i","className","rel","href","htmlFor","autoComplete","name","type","placeholder","onChange","onClick","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab222a7b.chunk.js","sourcesContent":["const getQuotes = () => {\n  return fetch(\"https://friends-quotes-api.herokuapp.com/quotes\")\n    .then((response) => response.json())\n    .then((data) => {\n      return data;\n    });\n};\n\nexport default getQuotes;\n","// Fichero src/services/localStorage.js\n\n// Función que obtiene una propiedad del local storage\n// Si esta propiedad no existe porque es la primera vez que la usuaria entra en la página, la función devuelve el valor de defaultValue\n// Que esta función devuelva un valor por defecto es una cómoda manera de trabajar, así esta comprobación no la tenemos que hacer en App.js\nconst get = (key, defaultValue) => {\n    const localStorageData = localStorage.getItem(key);\n    if (localStorageData === null) {\n        return defaultValue;\n    } else {\n        return JSON.parse(localStorageData);\n    }\n};\n\n// Función que guarda una propiedad y su valor en el local storage\nconst set = (key, value) => {\n    const localStorageData = JSON.stringify(value);\n    localStorage.setItem(key, localStorageData);\n};\n\n// Función que borra una propiedad del local storage\nconst remove = (key) => {\n    localStorage.removeItem(key);\n};\n\n// Función que limpia todo el local storage\nconst clear = () => {\n    localStorage.clear();\n};\n\n// Creamos un objeto temporal, que es el que queremos exportar\n// Este objeto tiene una propiedad get cuyo valor es la función get\n// Este objeto tiene una propiedad set cuyo valor es la función set\n// Este objeto tiene una propiedad remove cuyo valor es la función remove\n// Este objeto tiene una propiedad clear cuyo valor es la función clear\nconst objectToExport = {\n    get: get,\n    set: set,\n    remove: remove,\n    clear: clear,\n};\n\n// Exportamos el objeto para que pueda ser usado desde App\nexport default objectToExport;","// import quoteList from \"../data/quotes.json\";\nimport { useEffect, useState } from \"react\";\nimport \"../styles/App.scss\";\nimport getQuotes from \"../services/fetch\";\nimport ls from \"../services/localStorage\";\n\nfunction App() {\n  // ---------- STATE VARIABLES ----------\n\n  const [data, setData] = useState(ls.get(\"quotes\", [])); // Local storage\n\n  // Quote list\n  // const [data, setData] = useState(\"getQuotes\");\n\n  // Filters / Search\n  const [filterQuote, setFilterQuote] = useState(\"\"); // Filter 1\n  const [filterCharacter, setFilterCharacter] = useState(\"all\"); // Filter 2\n\n  // Add quote\n  const [newQuote, setNewQuote] = useState({\n    quote: \"\",\n    character: \"\",\n  });\n\n  // ---------- FETCH & LOCAL STORAGE ----------\n  useEffect(() => {\n    if (data.length === 0) {\n      getQuotes().then((dataFromAPI) => {\n        ls.set(\"quotes\", dataFromAPI);\n        setData(dataFromAPI);\n      });\n    }\n  }, []);\n\n  // ---------- FUNCTIONS ----------\n  // 1. Function to modify search button state variable - Detects what you write\n  const handleSearch = (ev) => {\n    setFilterQuote(ev.target.value);\n  };\n\n  // 2. Function to modify search button state variable - Detects what you select\n  const handleSearchCharacter = (ev) => {\n    setFilterCharacter(ev.target.value);\n  };\n\n  // 3. Function to add new quote - SPREAD changes a single property of an object\n  const handleNewQuote = (ev) => {\n    setNewQuote({\n      ...newQuote, // Keep what you already have\n      [ev.target.id]: ev.target.value, // Corchetes porque es una propiedad de un objeto que está guardada en una variable\n      // ID coge nombre de la propiedad del objeto\n    });\n  };\n\n  // 4. Function to paint new element - PUSH\n  const handleClickAdd = (ev) => {\n    ev.preventDefault();\n    setData([\n      // Square brackets because \"setData\" is an array. I'm using \"setData\" because I want to modify \"data\"\n      ...data, // Keep what you already have\n      newQuote, // Add a new element\n    ]);\n    setNewQuote({\n      quote: \"\",\n      character: \"\",\n    });\n  };\n\n  // ---------- PAINT IN HTML - 1st FILTER & 2nd MAP (concatenate)\n\n  const htmlData = data\n\n    // ---------- FILTER ----------\n    .filter((oneQuote) =>\n      oneQuote.quote.toLowerCase().includes(filterQuote.toLowerCase())\n    )\n\n    // .filter(oneQuote =>\n    //   oneQuote.character.toLowerCase().includes(filterCharacter.toLowerCase())\n    // )\n\n    .filter((oneQuote) => {\n      // return (filterCharacter === \"all\") ? true : (filterCharacter === oneQuote.character);\n\n      //return (filterCharacter === \"all\") || (filterCharacter === oneQuote.character);\n\n      if (filterCharacter === \"all\") {\n        return true;\n      } else if (filterCharacter === oneQuote.character) {\n        return true;\n      }\n      // Los no seleccionados\n      else {\n        return false;\n      }\n    })\n\n    // ---------- MAP - Paint characters ----------\n    .map((quote, i) => {\n      return (\n        <li className='quote__item' key={i}>\n          <p className='quote__name'>\n            {quote.quote} - {quote.character}\n          </p>\n        </li>\n      );\n    });\n\n  //   let diaSemana = 'lunes';\n\n  //   if( diaSemaqna ==== \"l\")\n  //  {\n  //    console.log(\"Atrabajar\");\n  //  }\n  //  else if( disSemana === \"M\") {\n  //    console.log(\"Animo\");\n  //  }\n  //  else if ( diaSemana === \"Miércoles\") {\n  //    console.log(\"Ya vamos por la mitad\");\n  //  }\n\n  return (\n    <div className='page'>\n      {/* ---------- HEADER ---------- */}\n      <header className='header'>\n        <a\n          target='_blank'\n          rel='noreferrer'\n          href='https://www.youtube.com/watch?v=Xs-HbHCcK58'\n        >\n          {\" \"}\n          <h1 className='header__title'>Frases de Friends 🦞</h1>\n        </a>\n        <form>\n          <label htmlFor='filterQuote'>Filtrar por frase </label>\n          <input\n            className='header__search'\n            autoComplete='off'\n            name='search'\n            type='search'\n            placeholder='Escribe una frase'\n            onChange={handleSearch}\n            value={filterQuote}\n          />\n        </form>\n        <form>\n          <label htmlFor='characters'>Filtrar por personaje </label>\n          <select\n            name='characters'\n            id='characters'\n            className='header__search'\n            onChange={handleSearchCharacter}\n            value={filterCharacter}\n          >\n            <option value='all'>Todos</option>\n            <option value='Ross'>Ross</option>\n            <option value='Monica'>Monica</option>\n            <option value='Joey'>Joey</option>\n            <option value='Phoebe'>Phoebe</option>\n            <option value='Chandler'>Chandler</option>\n            <option value='Rachel'>Rachel</option>\n          </select>\n        </form>\n      </header>\n\n      <main>\n        {/* ---------- QUOTE LIST ---------- */}\n        <ul className='quote__list'>\n          {/* {htmlData.length === 0 && \"No hay resultados\"} */}\n          {htmlData}\n        </ul>\n\n        {/* ---------- ADD NEW QUOTE ---------- */}\n        <form className='new-quote__form'>\n          <h2 className='new-quote__title'>Añade una nueva frase</h2>\n          <input\n            className='new-quote__input'\n            type='text'\n            name='quote'\n            id='quote'\n            placeholder='F · r · a · s · e'\n            onChange={handleNewQuote}\n            value={newQuote.quote}\n          />\n          <input\n            className='new-quote__input'\n            type='text'\n            name='character'\n            id='character'\n            placeholder='Personaje'\n            onChange={handleNewQuote}\n            value={newQuote.character}\n          />\n          <input\n            className='new-quote__btn'\n            type='submit'\n            value='Añadir'\n            onClick={handleClickAdd}\n          />\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}